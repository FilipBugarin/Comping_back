paths:
  movies-filter:
    post:
      tags:
        - Core
      summary: Filter and paginate movies
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetMoviesRequest'
      responses:
        '200':
          description: Paginated list of movies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MoviesFilterPost200Response'

  movie-add:
    post:
      tags:
        - Core
      summary: Create new movie
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovieRequest'
      responses:
        '201':
          description: Movie created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieResponse'

  movie:
    get:
      tags:
        - Core
      summary: Get movie by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Single movie
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieResponse'

    put:
      tags:
        - Core
      summary: Update movie
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovieRequest'
      responses:
        '200':
          description: Updated movie
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieResponse'

    delete:
      tags:
        - Core
      summary: Delete movie
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Deleted successfully

  actors-filter:
    post:
      tags:
        - Core
      summary: Filter and paginate actors
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetActorsRequest'
      responses:
        '200':
          description: Paginated list of actors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActorsFilterPost200Response'

  actor-add:
    post:
      tags:
        - Core
      summary: Create new actor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActorRequest'
      responses:
        '201':
          description: Actor created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActorResponse'

  actor:
    get:
      tags:
        - Core
      summary: Get actor by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Single actor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActorResponse'

    put:
      tags:
        - Core
      summary: Update actor
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActorRequest'
      responses:
        '200':
          description: Updated actor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActorResponse'

    delete:
      tags:
        - Core
      summary: Delete actor
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Deleted successfully

components:
  schemas:

    PagedMovieResponse:
      allOf:
        - $ref: 'common.yaml#/components/schemas/PagingInfo'
        - type: object
          properties:
            content:
              type: array
              items:
                $ref: '#/components/schemas/MovieResponse'

    PagedActorResponse:
      allOf:
        - $ref: 'common.yaml#/components/schemas/PagingInfo'
        - type: object
          properties:
            content:
              type: array
              items:
                $ref: '#/components/schemas/ActorResponse'

    GetMoviesRequest:
      allOf:
        - $ref: 'common.yaml#/components/schemas/Paging'
        - type: object
          properties:
            name:
              type: string
            actorIds:
              type: array
              items:
                type: integer
                format: int64

    GetActorsRequest:
      allOf:
        - $ref: 'common.yaml#/components/schemas/Paging'
        - type: object
          properties:
            description:
              type: string
            movieIds:
              type: array
              items:
                type: integer
                format: int64

    MovieRequest:
      type: object
      properties:
        name:
          type: string
        actorIds:
          type: array
          items:
            type: integer

    MovieResponse:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        actors:
          type: array
          items:
            $ref: '#/components/schemas/ActorResponse'

    ActorRequest:
      type: object
      properties:
        description:
          type: string
        movieIds:
          type: array
          items:
            type: integer

    ActorResponse:
      type: object
      properties:
        id:
          type: integer
        description:
          type: string
        movies:
          type: array
          items:
            $ref: '#/components/schemas/MovieResponse'

    MoviesFilterPost200Response:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/MovieResponse'
        pagingInfo:
          $ref: 'common.yaml#/components/schemas/PagingInfo'

    ActorsFilterPost200Response:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ActorResponse'
        pagingInfo:
          $ref: 'common.yaml#/components/schemas/PagingInfo'